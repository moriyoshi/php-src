{%DEFINES%}

ZEND_API void {%EXECUTOR_NAME%}(zend_op_array *op_array TSRMLS_DC)
{
	zend_execute_data *execute_data;
	zend_bool nested = 0;
	zend_bool original_in_execution = EG(in_execution);
	{%HELPER_VARS%}

	{%INTERNAL_LABELS%}

	if (EG(exception)) {
		return;
	}

	EG(in_execution) = 1;

zend_vm_enter:
	/* Initialize execute_data */
	execute_data = (zend_execute_data *)zend_vm_stack_alloc(
		ZEND_MM_ALIGNED_SIZE(sizeof(zend_execute_data)) +
		ZEND_MM_ALIGNED_SIZE(sizeof(zval**) * op_array->last_var * (EG(active_symbol_table) ? 1 : 2)) +
		ZEND_MM_ALIGNED_SIZE(sizeof(temp_variable)) * op_array->T TSRMLS_CC);

	EX(CVs) = (zval***)((char*)execute_data + ZEND_MM_ALIGNED_SIZE(sizeof(zend_execute_data)));
	memset(EX(CVs), 0, sizeof(zval**) * op_array->last_var);
	EX(Ts) = (temp_variable *)(((char*)EX(CVs)) + ZEND_MM_ALIGNED_SIZE(sizeof(zval**) * op_array->last_var * (EG(active_symbol_table) ? 1 : 2)));
	EX(fbc) = NULL;
	EX(called_scope) = NULL;
	EX(object) = NULL;
	EX(old_error_reporting) = NULL;
	EX(op_array) = op_array;
	EX(symbol_table) = EG(active_symbol_table);
	EX(prev_execute_data) = EG(current_execute_data);
	EG(current_execute_data) = execute_data;
	EX(error_jmp) = NULL;
	EX(prev_error_handling_frame) = NULL;
	EX(prev_error_cb) = NULL;
	EX(nested) = nested;
	nested = 1;

	if (op_array->start_op) {
		ZEND_VM_SET_OPCODE(op_array->start_op);
	} else {
		ZEND_VM_SET_OPCODE(op_array->opcodes);
	}

	if (op_array->this_var != -1 && EG(This)) {
 		Z_ADDREF_P(EG(This)); /* For $this pointer */
		if (!EG(active_symbol_table)) {
			EX(CVs)[op_array->this_var] = (zval**)EX(CVs) + (op_array->last_var + op_array->this_var);
			*EX(CVs)[op_array->this_var] = EG(This);
		} else {
			if (zend_hash_add(EG(active_symbol_table), "this", sizeof("this"), &EG(This), sizeof(zval *), (void**)&EX(CVs)[op_array->this_var])==FAILURE) {
				Z_DELREF_P(EG(This));
			}
		}
	}

	EG(opline_ptr) = &EX(opline);

	EX(function_state).function = (zend_function *) op_array;
	EX(function_state).arguments = NULL;
	
	while (1) {
    {%ZEND_VM_CONTINUE_LABEL%}
#ifdef ZEND_WIN32
		if (EG(timed_out)) {
			zend_timeout(0);
		}
#endif

		{%ZEND_VM_DISPATCH%} {
			{%INTERNAL_EXECUTOR%}
		}

	}
	zend_error_noreturn(E_ERROR, "Arrived at end of main loop which shouldn't happen");
}

static void zend_error_jmp_handler(int type, const char *error_filename, const uint error_lineno, const char *format, va_list args);

{%EXTERNAL_EXECUTOR%}

void zend_error_jmp_handler(int type, const char *error_filename, const uint error_lineno, const char *format, va_list args)
{
	TSRMLS_FETCH();
	zend_execute_data *execute_data = EG(current_execute_data);

	while (execute_data != EG(error_handling_frame)) {
		if (EX(function_state).function->type == ZEND_INTERNAL_FUNCTION) {
			zval_ptr_dtor(&EX_T(EX(opline)->result.u.var).var.ptr);
			zend_vm_stack_clear_multiple(TSRMLS_C);
		}

		zend_leave_helper_SPEC(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);
		execute_data = EG(current_execute_data);
#ifndef ZEND_VM_EXPORT
		if (zend_execute != execute) {
			zend_vm_stack_clear_multiple(TSRMLS_C);
		}
#else
		zend_vm_stack_clear_multiple(TSRMLS_C);
#endif
		EG(return_value_ptr_ptr) = EX(original_return_value);
		EG(active_symbol_table) = EX(symbol_table);
		/* symbol table should have been cleaned up in zend_leave_helper */
		if (EX(function_state).function->type == ZEND_USER_FUNCTION ||
			EX(function_state).function->common.scope) {
			EG(This) = EX(current_this);
			EG(scope) = EX(current_scope);
			EG(called_scope) = EX(current_called_scope);
		}
		EX(object) = EX(current_object);
		EX(called_scope) = DECODE_CTOR(EX(called_scope));
	}

	if (EX(function_state).function->type == ZEND_INTERNAL_FUNCTION) {
		zval_ptr_dtor(&EX_T(EX(opline)->result.u.var).var.ptr);
		zend_vm_stack_clear_multiple(TSRMLS_C);
	}

	LONGJMP(EX(error_jmp_buf), 1);
}

void {%INITIALIZER_NAME%}(void)
{
  {%EXTERNAL_LABELS%}
}
